(setf X 5)
(setf Y 2)
(** (* Y X) (+ 2 3))
(>= (** (* Y X) (+ 2 3)) 100000)
(defun test (p1 p2 p3 p4 p5) (+ p1 p2 p3 p4 p5))
(test (1 2 3 4 5))
(test (1 2 3 4 (* 4 10)))
(test (1 (+ (+ 2 14) (** 2 6)) 3 4 (* 4 10)))
(defun test2 (pp1 pp2) (+ (** pp1 pp2) 1))
(<= (+ 1 (* 4 8)) (test2 (2 5)))
(+ 1 (* 4 8))
(test2 (2 5)))
(test2 (2 (test2 (2 2)))))
(< (+ 1 (* 4 8)) (test2 (2 (test2 (2 2)))))
(<= (+ 1 (* 4 8)) (test2 (2 (test2 (2 2)))))
(= (+ 1 (* 4 8)) (test2 (2 (test2 (2 2)))))
(not (= (+ 1 (* 4 8)) (test2 (2 (test2 (2 2))))))
(/= (+ 1 (* 4 8)) (test2 (2 (test2 (2 2)))))
(/= (+ 1 (* 4 8)) (test2 (2 (test2 (2 2)))) 33 (+ 32 1))
(/= 6 (+ 1 (* 4 8)) (test2 (2 (test2 (2 2)))) 33 (+ 32 1) 5)
(not (= 6 (+ 1 (* 4 8)) (test2 (2 (test2 (2 2)))) 33 (+ 32 1) 5))
(test (1 2 3 4 (test2 (2 2))))
(+ 18 (test (1 2 3 4 (test2 (2 2)))))
(= 33 (+ 18 (test (1 2 3 4 (test2 (2 2))))))
(defun square (n) (- (test2 (n 2)) 0 0 1))
(test2 (2 5))
(test2 (5 2))
(- (test2 (5 2)) 1)
(- (test2 (5 2)) 0 1 0)
(square (5))
(square (10))
(+ 2 (* 2 (square (2))))
(square ((+ 2 (* 2 (square (2))))))
(defun s (max) (square (max)))
(setf three max)
(+ (cond ((< 1 0) (square (4))) ((> 1 0) (square (16)))) 0)
(s (three))